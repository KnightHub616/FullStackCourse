'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Request = require('./Request');

var _Request2 = _interopRequireDefault(_Request);

var _Order = require('./Order');

var _Order2 = _interopRequireDefault(_Order);

var _Account = require('./Account');

var _Account2 = _interopRequireDefault(_Account);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Stock = function () {
  _createClass(Stock, null, [{
    key: 'span',
    get: function get() {
      return { day: 'day', month: 'month', year: 'year', fiveYears: '5years' };
    }
  }]);

  function Stock(symbols) {
    _classCallCheck(this, Stock);

    this.symbols = symbols.toUpperCase();
    this.instruments = {};
  }

  _createClass(Stock, [{
    key: 'makeOrder',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {
        var orderParams;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getOrderParams();

              case 2:
                orderParams = _context.sent;
                return _context.abrupt('return', _Order2.default.place(Object.assign(orderParams, params)));

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function makeOrder(_x) {
        return _ref.apply(this, arguments);
      }

      return makeOrder;
    }()

    // basic

  }, {
    key: 'buy',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(quantity) {
        var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var price;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.quote;

              case 2:
                price = _context2.sent.results[0].last_trade_price;
                return _context2.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  price: price,
                  side: 'buy'
                }, extraParams)));

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buy(_x2) {
        return _ref2.apply(this, arguments);
      }

      return buy;
    }()
  }, {
    key: 'sell',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(quantity) {
        var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var price;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.quote;

              case 2:
                price = _context3.sent.results[0].last_trade_price;
                return _context3.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  price: price,
                  side: 'sell'
                }, extraParams)));

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function sell(_x4) {
        return _ref3.apply(this, arguments);
      }

      return sell;
    }()

    // limit

  }, {
    key: 'buyLimit',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(quantity, price) {
        var extraParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  price: price,
                  side: 'buy',
                  type: 'limit'
                }, extraParams)));

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function buyLimit(_x6, _x7) {
        return _ref4.apply(this, arguments);
      }

      return buyLimit;
    }()
  }, {
    key: 'sellLimit',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(quantity, price) {
        var extraParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  price: price,
                  side: 'sell',
                  type: 'limit'
                }, extraParams)));

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function sellLimit(_x9, _x10) {
        return _ref5.apply(this, arguments);
      }

      return sellLimit;
    }()

    // stop loss

  }, {
    key: 'stopLossSell',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(quantity, stopPrice) {
        var extraParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  side: 'sell',
                  trigger: 'stop',
                  stop_price: stopPrice
                }, extraParams)));

              case 1:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function stopLossSell(_x12, _x13) {
        return _ref6.apply(this, arguments);
      }

      return stopLossSell;
    }()
  }, {
    key: 'stopLossBuy',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(quantity, price) {
        var extraParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  side: 'buy',
                  trigger: 'stop',
                  price: price,
                  stop_price: price
                })));

              case 1:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function stopLossBuy(_x15, _x16) {
        return _ref7.apply(this, arguments);
      }

      return stopLossBuy;
    }()

    // stop loss + limit

  }, {
    key: 'stopLossSellLimit',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(quantity, stopPrice, sellPrice) {
        var extraParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                return _context8.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  side: 'sell',
                  type: 'limit',
                  trigger: 'stop',
                  price: sellPrice,
                  stop_price: stopPrice
                }, extraParams)));

              case 1:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function stopLossSellLimit(_x18, _x19, _x20) {
        return _ref8.apply(this, arguments);
      }

      return stopLossSellLimit;
    }()
  }, {
    key: 'stopLossBuyLimit',
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(quantity, stopPrice, buyPrice) {
        var extraParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt('return', this.makeOrder(Object.assign({
                  quantity: quantity,
                  side: 'buy',
                  type: 'limit',
                  trigger: 'stop',
                  price: buyPrice,
                  stop_price: stopPrice
                })));

              case 1:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function stopLossBuyLimit(_x22, _x23, _x24) {
        return _ref9.apply(this, arguments);
      }

      return stopLossBuyLimit;
    }()

    // helper

  }, {
    key: 'getOrderParams',
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.instrument();

              case 2:
                _context10.t0 = _context10.sent.results[0].url;
                _context10.next = 5;
                return _Account2.default.url();

              case 5:
                _context10.t1 = _context10.sent;
                _context10.t2 = this.symbols.split(',')[0];
                return _context10.abrupt('return', {
                  instrument: _context10.t0,
                  account: _context10.t1,
                  symbol: _context10.t2
                });

              case 8:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getOrderParams() {
        return _ref10.apply(this, arguments);
      }

      return getOrderParams;
    }()
  }, {
    key: 'quote',
    get: function get() {
      return _Request2.default.get('quotes', { symbols: this.symbols });
    }
  }]);

  return Stock;
}();

exports.default = Stock;