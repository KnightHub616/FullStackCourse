'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Request = require('./Request');

var _Request2 = _interopRequireDefault(_Request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var byId = {};
var bySymbol = {};

var Instrument = function () {
  _createClass(Instrument, null, [{
    key: 'valueBySymbol',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(symbol) {
        var instrument;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (bySymbol[symbol]) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return _Request2.default.get('instruments', { symbol: symbol });

              case 3:
                instrument = _context.sent.results[0];

                bySymbol[symbol] = instrument;
                byId[instrument.id] = instrument;

              case 6:
                return _context.abrupt('return', bySymbol[symbol]);

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function valueBySymbol(_x) {
        return _ref.apply(this, arguments);
      }

      return valueBySymbol;
    }()
  }, {
    key: 'valueById',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
        var instrument;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (byId[id]) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return _Request2.default.get('instruments/' + id);

              case 3:
                instrument = _context2.sent;

                byId[id] = instrument;
                bySymbol[instrument.symbol] = instrument;

              case 6:
                return _context2.abrupt('return', byId[id]);

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function valueById(_x2) {
        return _ref2.apply(this, arguments);
      }

      return valueById;
    }()
  }, {
    key: 'all',
    get: function get() {
      return _Request2.default.get('instruments');
    }
  }]);

  function Instrument(id) {
    _classCallCheck(this, Instrument);

    this.id = id;
  }

  _createClass(Instrument, [{
    key: 'value',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this._value) {
                  _context3.next = 4;
                  break;
                }

                _context3.next = 3;
                return _Request2.default.get('instruments/' + this.id);

              case 3:
                this._value = _context3.sent;

              case 4:
                return _context3.abrupt('return', this._value);

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function value() {
        return _ref3.apply(this, arguments);
      }

      return value;
    }()
  }]);

  return Instrument;
}();

exports.default = Instrument;