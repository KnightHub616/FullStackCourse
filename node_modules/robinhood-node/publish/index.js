'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('babel-polyfill');

var _Request = require('./core/Request');

var _Request2 = _interopRequireDefault(_Request);

var _Auth = require('./core/Auth');

var _Auth2 = _interopRequireDefault(_Auth);

var _Account = require('./core/Account');

var _Account2 = _interopRequireDefault(_Account);

var _Order = require('./core/Order');

var _Order2 = _interopRequireDefault(_Order);

var _Instrument = require('./core/Instrument');

var _Instrument2 = _interopRequireDefault(_Instrument);

var _Stock = require('./core/Stock');

var _Stock2 = _interopRequireDefault(_Stock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RobinhoodNode = function () {
  _createClass(RobinhoodNode, [{
    key: 'Stock',
    get: function get() {
      return _Stock2.default;
    }
  }, {
    key: 'Auth',
    get: function get() {
      return _Auth2.default;
    }
  }, {
    key: 'Account',
    get: function get() {
      return _Account2.default;
    }
  }, {
    key: 'Order',
    get: function get() {
      return _Order2.default;
    }
  }, {
    key: 'Instrument',
    get: function get() {
      return _Instrument2.default;
    }
  }]);

  function RobinhoodNode() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RobinhoodNode);

    if (params.user && params.password) {
      this.getToken(params.user, params.password, params.mfa);
    }
    console.log('Request -- >', _Request2.default);
    if (params.token) {
      _Request2.default.setToken(params.token);
    }
  }

  _createClass(RobinhoodNode, [{
    key: 'getToken',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(user, password, mfa) {
        var token;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _Auth2.default.getToken(user, password, mfa);

              case 2:
                token = _context.sent;

                _Request2.default.setToken(token);
                return _context.abrupt('return', token);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getToken(_x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return getToken;
    }()
  }]);

  return RobinhoodNode;
}();

exports.default = RobinhoodNode;